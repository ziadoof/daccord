# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    adsimages: '%kernel.project_dir%/public/assets/images/annonce/'
    profileimages: '%kernel.project_dir%/public/assets/images/profile/'


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            - 'mysql:dbname=onadaccord; host=127.0.0.1; port=3306'
            - { db_table: 'sessions',db_username: root, db_password: damnsmile }

    redirect.after.login:
        class: App\Service\AfterLoginRedirection
        arguments: ['@router']

    app.form.registration:
        class: App\Form\User\RegistrationType
        tags:
            - { name: form.type, alias: app_user_registration }
    app.profile.form.type:
        class: App\Form\User\ProfileType
        arguments: ['%fos_user.model.user.class%']
        tags:
            - { name: form.type, alias: app_user_profile }

    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Controller\User\RegistrationController:
        arguments:
            $formFactory: '@fos_user.registration.form.factory'
    App\Controller\User\ProfileController:
        arguments:
            $formFactory: '@fos_user.profile.form.factory'

    App\Service\FileUploader:
        arguments:
            $targetDirectory: '%adsimages%'

    App\Form\EventListener\AddCategoryFieldSubscriber:
        arguments:
            $factory:

    App\Form\EventListener\AddGeneralcategoryFieldSubscriber:
        arguments:
            $factory:
            $type:

    App\Form\EventListener\AddSpecificationFieldSubscriber:
        arguments:
            $factory:
            $entityManager:
            $type:

    App\Form\EventListener\AddSearchCategoryFieldSubscriber:
        arguments:
            $factory:

    App\Form\EventListener\AddSearchGeneralcategoryFieldSubscriber:
        arguments:
            $factory:
            $type:

    App\Form\EventListener\AddSearchSpecificationFieldSubscriber:
        arguments:
            $factory:
            $entityManager:
            $type:

    App\Events\EventSubscriber\AdAddSubscriber:
        class: App\Events\EventSubscriber\AdAddSubscriber
        arguments: ['@doctrine.orm.entity_manager']

    app_user.activity_listener:
        class: App\Events\ActivityListener
        arguments: ['@security.token_storage', '@doctrine.orm.entity_manager']
        tags:
            - { name: kernel.event_listener, event: kernel.controller, method: onCoreController }

    Mgilet\NotificationBundle\Manager\NotificationManager: '@mgilet.notification'

    App\Twig\NotificationExtension:
        class: App\Twig\NotificationExtension

    natification:
        class: App\Service\Natification
        arguments: ['@doctrine.orm.entity_manager','@mgiletNotificationManager' ]

    FOS\MessageBundle\Composer\ComposerInterface : '@fos_message.composer'
    FOS\MessageBundle\Sender\SenderInterface : '@fos_message.sender'
    FOS\MessageBundle\Security\ParticipantProviderInterface: '@fos_message.participant_provider'
    FOS\MessageBundle\ModelManager\MessageManagerInterface: '@fos_message.message_manager'

    app_message.new_thread_form.handler:
        class: App\Form\Message\NewThreadMessageFormHandler
        arguments: ['@request_stack', '@fos_message.composer', '@fos_message.sender', '@fos_message.participant_provider']
        public: true

    App\Service\Message\Message:
        class: App\Service\Message\Message

    App\Server\Chat:
        class: App\Server\Chat




